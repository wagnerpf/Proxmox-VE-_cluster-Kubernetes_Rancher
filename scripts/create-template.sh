#!/bin/bash

# Script para criar template Ubuntu 22.04 em n√≥s Proxmox VE
# Uso: ./create-template.sh [node1,node2,node3] ou ./create-template.sh single

set -e

TEMPLATE_ID=9000
TEMPLATE_NAME="ubuntu-22.04-cloud"
IMAGE_URL="https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img"
IMAGE_FILE="jammy-server-cloudimg-amd64.img"

echo "üöÄ Script de Cria√ß√£o de Template Ubuntu 22.04 para Proxmox VE"
echo "=============================================================="

# Fun√ß√£o para criar template em um n√≥
create_template_on_node() {
    local node=$1
    echo "üì¶ Criando template no n√≥: $node"
    
    # Verificar se n√≥ est√° acess√≠vel
    if ! ssh -o ConnectTimeout=5 root@$node "echo 'OK'" &>/dev/null; then
        echo "‚ùå Erro: N√£o foi poss√≠vel conectar no n√≥ $node"
        return 1
    fi
    
    # Verificar se template j√° existe
    if ssh root@$node "qm list | grep -q '$TEMPLATE_ID'"; then
        echo "‚ö†Ô∏è  Template ID $TEMPLATE_ID j√° existe no n√≥ $node"
        read -p "Deseja substituir? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "‚è≠Ô∏è  Pulando n√≥ $node"
            return 0
        fi
        echo "üóëÔ∏è  Removendo template existente..."
        ssh root@$node "qm destroy $TEMPLATE_ID"
    fi
    
    echo "‚¨áÔ∏è  Baixando imagem Ubuntu 24.04..."
    ssh root@$node << EOF
        cd /tmp
        rm -f $IMAGE_FILE
        wget -q --show-progress $IMAGE_URL
        
        echo "üîß Criando VM base..."
        qm create $TEMPLATE_ID --name $TEMPLATE_NAME --memory 2048 --cores 2 --net0 virtio,bridge=vmbr0
        
        echo "üíæ Importando disco..."
        qm importdisk $TEMPLATE_ID $IMAGE_FILE local-lvm
        
        echo "‚öôÔ∏è  Configurando VM..."
        qm set $TEMPLATE_ID --scsihw virtio-scsi-pci --scsi0 local-lvm:vm-$TEMPLATE_ID-disk-0
        qm set $TEMPLATE_ID --boot c --bootdisk scsi0
        qm set $TEMPLATE_ID --scsi1 local-lvm:cloudinit
        qm set $TEMPLATE_ID --serial0 socket --vga serial0
        qm set $TEMPLATE_ID --agent enabled=1
        
        echo "üìã Convertendo para template..."
        qm template $TEMPLATE_ID
        
        echo "üßπ Limpando arquivos tempor√°rios..."
        rm -f $IMAGE_FILE
        
        echo "‚úÖ Template $TEMPLATE_NAME criado com sucesso no n√≥ \$(hostname)!"
EOF
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Template criado com sucesso no n√≥: $node"
        return 0
    else
        echo "‚ùå Erro ao criar template no n√≥: $node"
        return 1
    fi
}

# Fun√ß√£o para listar n√≥s do cluster
list_cluster_nodes() {
    echo "üîç Detectando n√≥s do cluster..."
    
    # Tentar obter lista de n√≥s automaticamente
    if command -v pvecm &> /dev/null; then
        NODES=$(pvecm nodes | grep "^[[:space:]]*[0-9]" | awk '{print $3}' | grep -v "^$")
        if [ ! -z "$NODES" ]; then
            echo "üìã N√≥s encontrados:"
            echo "$NODES" | nl -w2 -s'. '
            return 0
        fi
    fi
    
    echo "‚ö†Ô∏è  N√£o foi poss√≠vel detectar n√≥s automaticamente"
    echo "üí° Execute este script em um n√≥ do cluster ou forne√ßa os n√≥s manualmente"
    return 1
}

# Fun√ß√£o para validar conectividade
validate_connectivity() {
    local nodes=("$@")
    echo "üîó Validando conectividade com os n√≥s..."
    
    local failed_nodes=()
    for node in "${nodes[@]}"; do
        if ssh -o ConnectTimeout=5 root@$node "echo 'OK'" &>/dev/null; then
            echo "‚úÖ $node - OK"
        else
            echo "‚ùå $node - FALHA"
            failed_nodes+=("$node")
        fi
    done
    
    if [ ${#failed_nodes[@]} -gt 0 ]; then
        echo "‚ö†Ô∏è  N√≥s com problemas de conectividade:"
        printf '%s\n' "${failed_nodes[@]}"
        echo "üí° Verifique SSH keys e conectividade de rede"
        return 1
    fi
    
    return 0
}

# Processamento dos argumentos
case "${1:-auto}" in
    "single")
        echo "üéØ Modo: Template em n√≥ √∫nico"
        echo "üí° Detectando n√≥ atual..."
        
        CURRENT_NODE=$(hostname)
        echo "üìç N√≥ atual: $CURRENT_NODE"
        
        read -p "Deseja criar template no n√≥ atual? (Y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Nn]$ ]]; then
            read -p "Digite o nome do n√≥ desejado: " CURRENT_NODE
        fi
        
        create_template_on_node "$CURRENT_NODE"
        ;;
        
    "auto")
        echo "üéØ Modo: Detec√ß√£o autom√°tica"
        
        if list_cluster_nodes; then
            NODES_ARRAY=($(pvecm nodes | grep "^[[:space:]]*[0-9]" | awk '{print $3}' | grep -v "^$"))
            echo ""
            echo "ü§î Escolha uma op√ß√£o:"
            echo "1) Criar template em todos os n√≥s (${#NODES_ARRAY[@]} n√≥s)"
            echo "2) Criar template em n√≥ espec√≠fico"
            echo "3) Cancelar"
            read -p "Op√ß√£o (1-3): " -n 1 -r
            echo
            
            case $REPLY in
                1)
                    echo "üîÑ Criando templates em todos os n√≥s..."
                    validate_connectivity "${NODES_ARRAY[@]}" || exit 1
                    
                    success_count=0
                    for node in "${NODES_ARRAY[@]}"; do
                        if create_template_on_node "$node"; then
                            ((success_count++))
                        fi
                        echo ""
                    done
                    
                    echo "üéâ Resumo: $success_count/${#NODES_ARRAY[@]} templates criados com sucesso!"
                    ;;
                2)
                    echo "üìã N√≥s dispon√≠veis:"
                    echo "${NODES_ARRAY[@]}" | tr ' ' '\n' | nl -w2 -s'. '
                    read -p "Digite o nome do n√≥: " SELECTED_NODE
                    create_template_on_node "$SELECTED_NODE"
                    ;;
                3)
                    echo "‚ùå Opera√ß√£o cancelada"
                    exit 0
                    ;;
                *)
                    echo "‚ùå Op√ß√£o inv√°lida"
                    exit 1
                    ;;
            esac
        else
            echo "üí° Execute em modo 'single' ou forne√ßa os n√≥s manualmente"
            echo "Uso: $0 single"
            echo "     $0 node1,node2,node3"
            exit 1
        fi
        ;;
        
    *)
        echo "üéØ Modo: N√≥s espec√≠ficos"
        IFS=',' read -ra NODES_ARRAY <<< "$1"
        echo "üìã N√≥s especificados: ${NODES_ARRAY[*]}"
        
        validate_connectivity "${NODES_ARRAY[@]}" || exit 1
        
        success_count=0
        for node in "${NODES_ARRAY[@]}"; do
            if create_template_on_node "$node"; then
                ((success_count++))
            fi
            echo ""
        done
        
        echo "üéâ Resumo: $success_count/${#NODES_ARRAY[@]} templates criados com sucesso!"
        ;;
esac

echo ""
echo "üìã Pr√≥ximos passos:"
echo "1. Configure terraform.tfvars com o n√≥ onde est√° o template"
echo "2. Execute: make init && make apply"
echo "3. Aguarde a cria√ß√£o do cluster Kubernetes + Rancher"
echo ""
echo "üîç Para verificar templates criados:"
echo "   pvesh get /cluster/resources --type vm | grep template"
echo ""
echo "‚ú® Template Ubuntu 24.04 pronto para uso!"
