.PHONY: help init plan apply destroy check deploy clean ansible-setup ansible-run

# Vari√°veis
TERRAFORM := terraform
KUBECTL := kubectl
ANSIBLE := ansible-playbook
KUBECONFIG_FILE := ./kubeconfig

# Help
help:
	@echo "üöÄ Comandos dispon√≠veis:"
	@echo ""
	@echo "üìã PREPARA√á√ÉO:"
	@echo "  prerequisites     - Instalar pr√©-requisitos necess√°rios"
	@echo "  show-ips          - Mostrar IPs que ser√£o atribu√≠dos"
	@echo "  check-ips         - Verificar se IPs est√£o livres"
	@echo ""
	@echo "üèóÔ∏è  INFRAESTRUTURA:"
	@echo "  init              - Inicializar Terraform"
	@echo "  plan              - Planejar execu√ß√£o do Terraform"
	@echo "  apply             - Aplicar configura√ß√£o do Terraform"
	@echo "  install           - Instala√ß√£o completa (Terraform + Ansible)"
	@echo "  destroy           - Destruir infraestrutura"
	@echo ""
	@echo "‚öôÔ∏è  CONFIGURA√á√ÉO:"
	@echo "  ansible-setup     - Instalar depend√™ncias do Ansible"
	@echo "  ansible-run       - Executar playbooks Ansible manualmente"
	@echo "  ping              - Testar conectividade SSH"
	@echo ""
	@echo "üîç VERIFICA√á√ÉO:"
	@echo "  check             - Verificar status do cluster"
	@echo "  validate          - Valida√ß√£o completa do cluster"
	@echo "  status            - Status detalhado da infraestrutura"
	@echo ""
	@echo "üåê ACESSO:"
	@echo "  rancher-info      - Mostrar informa√ß√µes do Rancher"
	@echo "  ssh-master        - Conectar via SSH no master"
	@echo "  urls              - Mostrar todas as URLs de acesso"
	@echo ""
	@echo "üßπ UTILIT√ÅRIOS:"
	@echo "  clean             - Limpar arquivos tempor√°rios"
	@echo "  logs              - Mostrar logs do cluster"
	@echo "  debug             - Informa√ß√µes de debug"

# Instalar pr√©-requisitos
prerequisites:
	@echo "üì¶ Instalando pr√©-requisitos..."
	@chmod +x scripts/install-prerequisites.sh
	@./scripts/install-prerequisites.sh

# Instala√ß√£o completa
install: prerequisites init
	@echo "üöÄ Iniciando instala√ß√£o completa..."
	@echo "1/3 - Aplicando Terraform..."
	@$(TERRAFORM) apply -auto-approve
	@echo "‚è≥ Aguardando VMs inicializarem completamente..."
	@sleep 60
	@echo "2/3 - Executando Ansible..."
	@cd ansible && $(ANSIBLE) -i inventory site.yml
	@echo "3/3 - Validando cluster..."
	@$(MAKE) validate
	@echo "‚úÖ Instala√ß√£o conclu√≠da com sucesso!"

# Valida√ß√£o completa
validate:
	@echo "üîç Validando cluster..."
	@chmod +x scripts/validate-cluster.sh
	@./scripts/validate-cluster.sh

# Verificar se IPs est√£o livres  
check-ips:
	@echo "üîç Verificando se IPs est√£o livres na sua rede..."
	@echo ""
	@echo "üí° Configure os IPs em terraform.tfvars conforme sua rede"
	@echo "üìã Exemplo de verifica√ß√£o:"
	@echo "   ping -c 1 SEU_MASTER_IP"
	@echo "   ping -c 1 SEU_WORKER_IP_1"
	@echo "   ping -c 1 SEU_WORKER_IP_2"
	@echo ""
	@echo "üí° Se algum IP estiver em uso, edite terraform.tfvars para usar IPs diferentes"

# URLs de acesso
urls:
	@echo "üåê URLs de Acesso do Cluster:"
	@echo ""
	@echo "üìä Kubernetes API:"
	@echo "   https://SEU_MASTER_IP:6443"
	@echo ""
	@echo "üéõÔ∏è  Rancher UI (ap√≥s instala√ß√£o):"
	@echo "   https://SEU_MASTER_IP"
	@echo "   https://SEU_MASTER_IP:8443"
	@echo ""
	@echo "üîê Para acessar o Rancher:"
	@echo "   Usu√°rio: admin"
	@echo "   Senha: Use 'make rancher-info' para ver a senha inicial"

# IP verification
show-ips:
	@echo "üîç Verificando IPs que ser√£o atribu√≠dos..."
	@if [ -f terraform.tfvars ]; then \
		$(TERRAFORM) output -json ip_assignment_summary 2>/dev/null || \
		$(TERRAFORM) plan -var-file=terraform.tfvars 2>/dev/null | grep -E "(master|worker).*ip=" || \
		echo "Execute 'make plan' para ver os IPs que ser√£o atribu√≠dos"; \
	else \
		echo "‚ùå Arquivo terraform.tfvars n√£o encontrado"; \
		echo "üí° Configure primeiro: cp terraform.tfvars.example terraform.tfvars"; \
	fi

# Template creation
create-template:
	@echo "Criando template Ubuntu 22.04..."
	@chmod +x scripts/create-template.sh
	@./scripts/create-template.sh

# Terraform commands
init:
	@echo "Inicializando Terraform..."
	$(TERRAFORM) init

plan:
	@echo "Planejando execu√ß√£o..."
	$(TERRAFORM) plan

apply:
	@echo "Aplicando configura√ß√£o..."
	$(TERRAFORM) apply

# Status detalhado
status:
	@echo "üìä Status da Infraestrutura Kubernetes"
	@echo "=========================================="
	@echo ""
	@echo "üèóÔ∏è  TERRAFORM:"
	@if [ -f .terraform/terraform.tfstate ]; then \
		echo "‚úÖ Terraform inicializado"; \
	else \
		echo "‚ùå Terraform n√£o inicializado - execute 'make init'"; \
	fi
	@if [ -f terraform.tfstate ] && [ -s terraform.tfstate ]; then \
		echo "‚úÖ Infraestrutura provisionada"; \
		$(TERRAFORM) output -json 2>/dev/null | jq -r '.master_ips.value[]? // empty' | while read ip; do \
			echo "   üìç Master: $$ip"; \
		done; \
		$(TERRAFORM) output -json 2>/dev/null | jq -r '.worker_ips.value[]? // empty' | while read ip; do \
			echo "   üìç Worker: $$ip"; \
		done; \
	else \
		echo "‚ùå Infraestrutura n√£o provisionada - execute 'make apply'"; \
	fi
	@echo ""
	@echo "‚öôÔ∏è  KUBERNETES:"
	@if [ -f $(KUBECONFIG_FILE) ]; then \
		echo "‚úÖ Kubeconfig dispon√≠vel"; \
		KUBECONFIG=$(KUBECONFIG_FILE) $(KUBECTL) cluster-info 2>/dev/null | head -1 || echo "‚ùå Cluster n√£o acess√≠vel"; \
		KUBECONFIG=$(KUBECONFIG_FILE) $(KUBECTL) get nodes 2>/dev/null | grep -c Ready | xargs echo "   üìä Nodes prontos:" || echo "‚ùå Nodes n√£o acess√≠veis"; \
	else \
		echo "‚ùå Kubeconfig n√£o encontrado"; \
	fi
	@echo ""
	@echo "üåê RANCHER:"
	@if [ -f $(KUBECONFIG_FILE) ]; then \
		KUBECONFIG=$(KUBECONFIG_FILE) $(KUBECTL) get pods -n cattle-system 2>/dev/null | grep -c Running | xargs echo "   üìä Pods rodando:" || echo "‚ùå Rancher n√£o instalado"; \
	fi
	@echo ""

destroy:
	@echo "Destruindo infraestrutura..."
	$(TERRAFORM) destroy

# Ansible commands
ansible-setup:
	@echo "Instalando depend√™ncias do Ansible..."
	@ansible-galaxy collection install -r ansible/requirements.yml
	@pip3 install kubernetes

ansible-run:
	@echo "Executando playbooks Ansible..."
	@cd ansible && $(ANSIBLE) -i inventory site.yml

# Kubernetes commands
check:
	@echo "Verificando cluster..."
	@chmod +x scripts/check-cluster.sh
	@./scripts/check-cluster.sh

# Utilities
rancher-info:
	@echo "üåê Informa√ß√µes do Rancher:"
	@echo ""
	@echo "üìä URLs de Acesso:"
	@echo "   https://SEU_MASTER_IP"
	@echo "   https://SEU_MASTER_IP:8443"
	@echo ""
	@echo "üîê Credenciais:"
	@echo "   Usu√°rio: admin"
	@echo "   Senha: admin123 (padr√£o)"
	@echo ""
	@echo "üí° Para obter a senha real do bootstrap:"
	@echo "   ssh -i ~/.ssh/k8s-cluster-key -o StrictHostKeyChecking=no SEU_USUARIO@SEU_MASTER_IP \"sudo docker logs rancher-server 2>&1 | grep 'Bootstrap Password:' | tail -1\""

ssh-master:
	@echo "Conectando no master via SSH..."
	@echo "(Configure o IP e usu√°rio corretos em terraform.tfvars)"
	@echo "Exemplo de comando:"
	@echo "ssh -i ~/.ssh/k8s-cluster-key -o StrictHostKeyChecking=no SEU_USUARIO@SEU_MASTER_IP"

get-kubeconfig:
	@echo "Baixando kubeconfig do master..."
	@echo "(Configure o IP e usu√°rio corretos)"
	@echo "Exemplo de comando:"
	@echo "scp -i ~/.ssh/k8s-cluster-key -o StrictHostKeyChecking=no SEU_USUARIO@SEU_MASTER_IP:/home/SEU_USUARIO/.kube/config $(KUBECONFIG_FILE)"

deploy:
	@echo "Fazendo deploy de aplica√ß√£o exemplo..."
	@chmod +x scripts/deploy-example.sh
	@./scripts/deploy-example.sh

# Verificar se terraform.tfvars existe
check-config:
	@if [ ! -f terraform.tfvars ]; then \
		echo "Arquivo terraform.tfvars n√£o encontrado!"; \
		echo "Copie terraform.tfvars.example para terraform.tfvars e configure suas vari√°veis."; \
		exit 1; \
	fi

# Teste de conectividade
ping:
	@echo "üîó Testando conectividade SSH..."
	@cd ansible && ansible all -i inventory -m ping

# Logs do cluster
logs:
	@echo "üìã Coletando logs do cluster..."
	@mkdir -p logs
	@cd ansible && ansible masters -i inventory -m shell -a "kubectl logs -n cattle-system deployment/rancher --tail=50" > ../logs/rancher.log 2>/dev/null || true
	@cd ansible && ansible masters -i inventory -m shell -a "kubectl get events --all-namespaces --sort-by='.lastTimestamp'" > ../logs/events.log 2>/dev/null || true
	@echo "‚úÖ Logs salvos em logs/"

# Debug information
debug:
	@echo "üêõ Informa√ß√µes de debug:"
	@echo "Terraform version: $$($(TERRAFORM) version | head -1)"
	@echo "Ansible version: $$(ansible --version | head -1)"
	@echo "Python version: $$(python3 --version)"
	@echo "Kubectl version: $$(kubectl version --client --short 2>/dev/null || echo 'n√£o instalado')"
	@echo "Helm version: $$(helm version --short 2>/dev/null || echo 'n√£o instalado')"

clean:
	@echo "üßπ Limpando arquivos tempor√°rios..."
	@rm -f ansible/inventory
	@rm -f $(KUBECONFIG_FILE)
	@rm -f .terraform.lock.hcl
	@rm -rf logs/*
	@echo "‚úÖ Limpeza conclu√≠da"
